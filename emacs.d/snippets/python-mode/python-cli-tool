# key: pycli
# name: python-cli-tool
# --
#!/usr/bin/env python3
import sys
import argparse
import logging

# setup logging
log = logging.getLogger()
log.setLevel(logging.WARNING)
sh = logging.StreamHandler()
sh.setLevel(logging.WARNING)
log.addHandler(sh)

if (__name__) == '__main__':
    ap = argparse.ArgumentParser()
    ap.add_argument('files', metavar='F', nargs='+',
                    help='The input files')
    # TODO: add the switches you need
    ap.add_argument('-l', '--log', help='Path to where the log should be saved')
    ap.add_argument('-v', '--verbose', action='count', default=0, help='Print verbose messages')
    cmd = ap.add_subparsers(title='action', help=f'The action {sys.argv[0]} should perform', dest='action')
    # TODO add subcommands
    cmds = {}
    cmds["sub-configs"] = cmd.add_parser('sub-configs', help='Print the names of all sub-configs (if any)')
    args = ap.parse_args()

    # set logging level
    loglevel = max(0, logging.WARNING - (10 * args.verbose))
    log.setLevel(loglevel)
    sh.setLevel(loglevel)

    if args.log is not None:
        log.info(f'Saving log in file: {args.log}')
        fh = logging.FileHandler(args.log, mode='w', encoding='utf-8')
        fh.setLevel(loglevel)
        log.addHandler(fh)

    if loglevel <= logging.INFO and loglevel > logging.DEBUG:
        log.info('Loglevel: INFO')
    elif loglevel <= logging.DEBUG:
        log.info('Loglevel: DEBUG')